# Generated by ariadne-codegen
# Source: migrator/wikijs/queries.graphql

from typing import Any, Dict, List

from .base_client import BaseClient
from .create_page import CreatePage
from .update_page import UpdatePage


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def create_page(
        self,
        content: str,
        description: str,
        is_published: bool,
        is_private: bool,
        editor: str,
        locale: str,
        path: str,
        title: str,
        tags: List[str],
        **kwargs: Any
    ) -> CreatePage:
        query = gql(
            """
            mutation CreatePage($content: String!, $description: String!, $isPublished: Boolean!, $isPrivate: Boolean!, $editor: String!, $locale: String!, $path: String!, $title: String!, $tags: [String]!) {
              pages {
                create(
                  content: $content
                  description: $description
                  isPublished: $isPublished
                  isPrivate: $isPrivate
                  title: $title
                  editor: $editor
                  path: $path
                  locale: $locale
                  tags: $tags
                ) {
                  responseResult {
                    succeeded
                    errorCode
                    slug
                    message
                  }
                  page {
                    id
                    path
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "content": content,
            "description": description,
            "isPublished": is_published,
            "isPrivate": is_private,
            "editor": editor,
            "locale": locale,
            "path": path,
            "title": title,
            "tags": tags,
        }
        response = self.execute(
            query=query, operation_name="CreatePage", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreatePage.model_validate(data)

    def update_page(
        self, id: int, content: str, editor: str, **kwargs: Any
    ) -> UpdatePage:
        query = gql(
            """
            mutation UpdatePage($id: Int!, $content: String!, $editor: String!) {
              pages {
                update(id: $id, content: $content, editor: $editor) {
                  responseResult {
                    succeeded
                    errorCode
                    slug
                    message
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id, "content": content, "editor": editor}
        response = self.execute(
            query=query, operation_name="UpdatePage", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdatePage.model_validate(data)
