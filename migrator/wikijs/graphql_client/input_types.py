# Generated by ariadne-codegen
# Source: migrator/wikijs/schema.graphql

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import PageRuleMatch


class AnalyticsProviderInput(BaseModel):
    is_enabled: bool = Field(alias="isEnabled")
    key: str
    config: Optional[List[Optional["KeyValuePairInput"]]] = None


class AuthenticationStrategyInput(BaseModel):
    key: str
    strategy_key: str = Field(alias="strategyKey")
    config: Optional[List[Optional["KeyValuePairInput"]]] = None
    display_name: str = Field(alias="displayName")
    order: int
    is_enabled: bool = Field(alias="isEnabled")
    self_registration: bool = Field(alias="selfRegistration")
    domain_whitelist: List[str] = Field(alias="domainWhitelist")
    auto_enroll_groups: List[int] = Field(alias="autoEnrollGroups")


class CommentProviderInput(BaseModel):
    is_enabled: bool = Field(alias="isEnabled")
    key: str
    config: Optional[List[Optional["KeyValuePairInput"]]] = None


class KeyValuePairInput(BaseModel):
    key: str
    value: str


class PageRuleInput(BaseModel):
    id: str
    deny: bool
    match: PageRuleMatch
    roles: List[str]
    path: str
    locales: List[str]


class LoggerInput(BaseModel):
    is_enabled: bool = Field(alias="isEnabled")
    key: str
    level: str
    config: Optional[List[Optional["KeyValuePairInput"]]] = None


class NavigationTreeInput(BaseModel):
    locale: str
    items: List["NavigationItemInput"]


class NavigationItemInput(BaseModel):
    id: str
    kind: str
    label: Optional[str] = None
    icon: Optional[str] = None
    target_type: Optional[str] = Field(alias="targetType", default=None)
    target: Optional[str] = None
    visibility_mode: Optional[str] = Field(alias="visibilityMode", default=None)
    visibility_groups: Optional[List[Optional[int]]] = Field(
        alias="visibilityGroups", default=None
    )


class RendererInput(BaseModel):
    is_enabled: bool = Field(alias="isEnabled")
    key: str
    config: Optional[List[Optional["KeyValuePairInput"]]] = None


class SearchEngineInput(BaseModel):
    is_enabled: bool = Field(alias="isEnabled")
    key: str
    config: Optional[List[Optional["KeyValuePairInput"]]] = None


class StorageTargetInput(BaseModel):
    is_enabled: bool = Field(alias="isEnabled")
    key: str
    mode: str
    sync_interval: Optional[str] = Field(alias="syncInterval", default=None)
    config: Optional[List[Optional["KeyValuePairInput"]]] = None


class SystemFlagInput(BaseModel):
    key: str
    value: bool


AnalyticsProviderInput.model_rebuild()
AuthenticationStrategyInput.model_rebuild()
CommentProviderInput.model_rebuild()
LoggerInput.model_rebuild()
NavigationTreeInput.model_rebuild()
RendererInput.model_rebuild()
SearchEngineInput.model_rebuild()
StorageTargetInput.model_rebuild()
