fragment FullResponseResult on ResponseStatus {
    succeeded
    errorCode
    slug
    message
}

mutation CreatePage(
    $content: String!
    $description: String!
    $isPublished: Boolean!
    $isPrivate: Boolean!
    $editor: String!
    $locale: String!
    $path: String!
    $title: String!
    $tags: [String]!) {
    pages {
        create(
            content: $content, 
            description: $description,
            isPublished: $isPublished,
            isPrivate: $isPrivate,
            title: $title, 
            editor: $editor, 
            path: $path, 
            locale: $locale,
            tags: $tags) {
            responseResult {
                succeeded
                errorCode
                slug
                message
            }
            page {
                id
                path
            }
        }
    }
}

mutation UpdatePage(
    $id: Int!
    $content: String!
    $editor: String!
    $tags: [String!]!) {
    pages {
        update(
            id: $id
            content: $content
            editor: $editor
            tags: $tags
        ) {
            responseResult {
                succeeded
                errorCode
                slug
                message
            }
        }
    }
}

mutation CreateFolder($parentFolderId: Int!, $slug: String!, $name: String) {
    assets {
        createFolder(parentFolderId: $parentFolderId, slug: $slug, name: $name) {
            responseResult {
                succeeded
                errorCode
                slug
                message
            }
        }
    }
}

query ListFolders($parentFolderId: Int!) {
    assets {
        folders(parentFolderId: $parentFolderId) {
            id
            slug
            name
        }
    }
}

query ListPages {
    pages {
        list {
            id
            path
            locale
        }
    }
}

mutation DeletePage($pageId: Int!) {
    pages {
        delete(id: $pageId) {
            responseResult {
                ... FullResponseResult
            }
        }
    }
}